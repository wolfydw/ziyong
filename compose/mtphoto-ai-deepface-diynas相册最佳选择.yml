# 修改自https://github.com/FrozenGEE/compose/blob/main/%5B02%5D%20unRAID/%5BunRAID%5D%20mt-photos%2Bai%2Bdeepface-diynas%E7%9B%B8%E5%86%8C%E6%9C%80%E4%BD%B3%E9%80%89%E6%8B%A9.yml

# 官网资料
# https://mtmt.tech
# https://mtmt.tech/docs/guide/install
# https://mtmt.tech/docs/example/intro
# https://mtmt.tech/docs/advanced/env
# https://hub.docker.com/r/mtphotos/mt-photos

# 支持vector向量的存储的postgresql
# https://hub.docker.com/r/mtphotos/mt-photos-pg

# 智能识别API
# https://github.com/MT-Photos/mt-photos-ai
# https://mtmt.tech/docs/advanced/ocr_api
# https://hub.docker.com/r/mtphotos/mt-photos-ai

# 人脸识别-deepface
# https://mtmt.tech/docs/advanced/facial_api
# https://mtmt.tech/docs/advanced/deepface_api
# https://hub.docker.com/r/mtphotos/mt-photos-deepface

# 人脸识别-insightface
# https://mtmt.tech/docs/advanced/insightface_api
# 基于kqstone大佬的仓库 https://github.com/kqstone/mt-photos-insightface-unofficial 打包
# https://github.com/MT-Photos/mt-photos-deepface/issues/16
# https://gitee.com/mt-photos/mt-photos-deepface/issues/IAM6GM

# 内置模型、Insightface模型、Deepface模型，它们是不同的模型，如果需要切换，请按设置中切换使用API识别模型的步骤 执行
# 如果换insightface的模型，也需要先按切换使用API识别模型的步骤执行 ，比如从 buffalo_l 换 antelopev2
# Insightface模型，识别速度更快，更准确（推荐）
# Deepface模型，添加人脸识别deepface API（备选）

# 想知道更多细节，强烈推荐查看官方文档，写的特别详细
# 前排提示，可免费试用一个月，99买断，试用结束后话可以用，但是无法更新显示以后添加的内容
# 强烈推荐无脑入，2024-11-27：已经涨价到118了

# CUDA版本镜像，未内置buffalo_l相关的模型文件；如果容器启动后，下载模型文件失败；请查看下载模型后目录映射给容器

---
version: "3"
# 最后编辑时间：2024-11-27
# 2024-11-27 更新日志：增加mt-photos-insightface的compose，insightface和deepface两者选其一即可，新增各种类型的镜像及说明
# 2024-04-28 更新日志：新增mt-photos-deepface，修正部分错误内容，删减不需要的内容，新增人脸识别API使用支持cpu无avx指令的镜像，新增N卡驱动AI识别镜像编译教程
services:
  mt-photos:
    image: mtphotos/mt-photos:latest
    # 镜像地址，支持arm64v8
    # 注意nodb-latest和arm64v8不存在内置数据库，需要额外部署一个外部数据库
    container_name: mt-photos
    # 容器名字
    hostname: mt-photos
    # 主机名
    privileged: true
    # 特权模式，赋予容器几乎与主机相同的权限
    devices:
      - /dev/dri:/dev/dri
      # 开启硬件加速支持，注意：arm设备不支持硬件加速
    volumes:
      - /mnt/user/appdata/MtPhotos/config:/config
      # 配置文件目录
      - /mnt/user/appdata/MtPhotos/MtPhotos_upload:/upload
      # 上传目录
      # - /mnt/user:/unRAID
      # 本地相册目录，可自定义目录，可以写多个
      # - /mnt/user/appdata/mt-photos/视频转码:/视频转码
      # 视频转码存放目录，非必要
    environment:
      - MT_SERVER_PORT=8063
      # 指定MT Photos服务端的端口，默认为8063，可自定义端口后直接使用host网络模式
      - TZ=Asia/Shanghai
      # 时区
      ######################################
      # - REDIS_HOST=127.0.0.1
      # 指定要连接的Redis的地址，默认为127.0.0.1
      # - REDIS_PORT=6379
      # 指定要连接的Redis的端口号，默认为6379
      # - REDIS_PASSWORD=Redis的密码
      # 指定要连接的Redis的密码，具体看自己的配置单
      ######################################
      # 仅当使用 nodb-latest 或 arm-latest 时才需要使用，amd64默认镜像内已内置
      # - POSTGRES_HOST=127.0.0.1
      # - POSTGRES_PORT=8062
      # 指定要连接的PGSQL的地址，默认IP为127.0.0.1，端口修改为8062
      # - POSTGRES_DATABASE=postgres
      # - POSTGRES_USER=postgres
      # - POSTGRES_PASSWORD=postgres
      # 指定要连接的PGSQL的数据库，账号密码，预设均为postgres
      ######################################
      # https://mtmt.tech/docs/advanced/env
      # 以下内容来源于官方文档，均为默认，可以不写
      # - RAW_SUPPORT=open
      # RAW格式支持，默认开启
      # - SCAN_INTERVAL=15
      # 指定自动扫描图库的间隔时间，单位为分钟，默认为15，最大支持9999
      # - EXIF_OVERWRITE_TYPE=overwrite_original_in_place
      # 指定exiftool写入模式，默认为overwrite_original
      # - DAY_MAX_FILE_NUM=298
      # 时间线模式中单天显示的照片数量上限，默认为298
      # - STREAM_LINK_TTL=30
      # 分享的串流地址有效时间，单位为分钟，默认为30
      # CACHE_DIR_PATH=/config/cache
      # 自定义保存缩略图的位置，默认为/config/cache
      ######################################
      # - PROXY_HOST_AMAP=http://xxx.com/
      # 指定代理地址-高德api，默认为空
      # - PROXY_HOST_MAPBOX=http://xxx.com/
      # 指定代理地址-mapbox api，默认为空
      ######################################
      # - PROXY_HOST_AUTH=http://xxx.com/
      # 指定代理地址-授权服务器，默认为空，仅作预留，不写
      ######################################
    # network_mode: bridge
    network_mode: host
    # 推荐自定义MT的WebUI端口，然后直接用host模式
    # host模式需要容器内的端口不被占用，不需要端口映射，后续端口映射全都开头加#注释掉，否则注释掉这条
    # ports:
      # - 8063:8063/tcp
      # WebUI http端口
    restart: unless-stopped
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.webui: http://[IP]:[PORT:8063]
      # 适用于unraid界面打开WebUI，注意端口号写的是容器端口，如有自定义，自行修改
      net.unraid.docker.icon: https://cdn.mtmt.tech/logo-r.png
      # 适用于unraid的图标，可以写unRAID的路径地址，也可以写一个图标地址(局域网或广域网均可)
      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑

############################################################################

  mt-photos-ai:
    image: mtphotos/mt-photos-ai:latest
    # 镜像地址，具体tag如下
    # latest：基于openvino文件夹打包，推荐Intel Xeon、Core系列 CPU机型安装这个镜像
    # onnx-latest:基于onnx文件夹打包，推荐其他CPU机型安装这个镜像
    # cuda-latest:基于cuda文件夹打包，nvidia显卡机型可以安装这个镜像
    # arm-latest:基于onnx文件夹打包，armv8架构机型可以安装这个镜像
    container_name: mt-photos-ai
    # 容器名字
    hostname: mt-photos-ai
    # 主机名
    environment:
      - API_AUTH_KEY=mt_photos_ai_extra_secret
      # 智能识别API，可以随便写，在mt-photos内设置要对应该项
    network_mode: bridge
    # network_mode: host
    # host模式需要容器内的端口不被占用，不需要端口映射，后续端口映射全都开头加#注释掉，否则注释掉这条
    ports:
      - 8064:8000/tcp
      # API 端口
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可
    restart: unless-stopped
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.webui: https://mtmt.tech/docs/advanced/ocr_api
      # 因不存在WebUI，所以此处为官方说明文档
      net.unraid.docker.icon: https://cdn.mtmt.tech/logo-r.png
      # 适用于unraid的图标，可以写unRAID的路径地址，也可以写一个图标地址(局域网或广域网均可)
      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑

############################################################################

  mt-photos-insightface:
    image: devfox101/mt-photos-insightface-unofficial:latest
    # 镜像地址，支持arm64v8
    # CUDA版本镜像，需要CUDA 版本 12.3.0 以上，显卡驱动版本 >=545.23.06
    # crpi-gcuyquw9co62xzjn.cn-guangzhou.personal.cr.aliyuncs.com/devfox101/mt-photos-insightface-unofficial:cuda-latest
    container_name: mt-photos-insightface
    # 容器名字
    hostname: mt-photos-insightface
    # 主机名
    environment:
      - API_AUTH_KEY=mt_photos_ai_extra
      # 人脸识别API，可以随便写，在mt-photos内设置要对应该项
      ######################################
    # volumes:
      # - /mnt/user/appdata/mt-photos/insightface/models:/root/.insightface/models
      # CUDA版本镜像，未内置buffalo_l相关的模型文件；如果容器启动后，下载模型文件失败；请查看下载模型后目录映射给容器
      ## 模型文件下载地址：https://github.com/kqstone/mt-photos-insightface-unofficial/releases/tag/models 或者百度网盘：https://pan.baidu.com/s/1SsY7_2t7aORh2jCvGWtD1A?pwd=1234
      ## 下载模型文件 buffalo_l.zip 或者 antelopev2.zip 并解压到映射的目录中，以 buffalo_l.zip 为例
      ## 需要把 buffalo_l.zip 的文件解压到 /mnt/user/appdata/mt-photos/insightface/modelss/buffalo_l 这个目录
      ## 解压完成后，在 /mnt/user/appdata/mt-photos/insightface/modelss/buffalo_l 目录下，可以看到 1k3d68.onnx、2d106det.onnx、det_10g.onnx、genderage.onnx、w600k_r50.onnx 5个文件
      ######################################
    network_mode: bridge
    # network_mode: host
    # host模式需要容器内的端口不被占用，不需要端口映射，后续端口映射全都开头加#注释掉，否则注释掉这条
    ports:
      - 8066:8066/tcp
      # API 端口
      # 注意：并不存在WebUI，只需要通过IP:PORT调用即可
    restart: unless-stopped
    # 重启策略，可根据实际情况而选择 no/always/unless-stopped/on-failure/on-failure:3
    labels:
      net.unraid.docker.managed: dockerman
      net.unraid.docker.webui: https://mtmt.tech/docs/advanced/insightface_api
      # 因不存在WebUI，所以此处为官方说明文档
      net.unraid.docker.icon: https://cdn.mtmt.tech/logo-r.png
      # 适用于unraid的图标，可以写unRAID的路径地址，也可以写一个图标地址(局域网或广域网均可)
      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑


      # 注意：通过compose创建的docker容器，无法在unRAID上进行编辑
